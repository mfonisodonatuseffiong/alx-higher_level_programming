<<<<<<< HEAD
========================================
  Documentation of 7-base_geometry.py
========================================

Contains a `BaseGeometry` class with the following methods

`def area(self):`

which calculates the area of the `BaseGeometry`

`def integer_validator(self, name, value):`

validates the `value` based

Test cases
==========

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

Case with a positive value

>>> bg.integer_validator("my_int", 12)
>>>

Case with a negative value

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

Case with a float

>>> bg.integer_validator("year", 8.5)
Traceback (most recent call last):
TypeError: year must be an integer

Case with zero

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

Case with a non integer

>>> bg.integer_validator("name", "A!ex")
Traceback (most recent call last):
TypeError: name must be an integer

Case with value as boolean

>>> bg.integer_validator("width", True)
Traceback (most recent call last):
TypeError: width must be an integer

Case catched output with string value

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer

Case catched output with 0 as value

>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0

Case with negative value

>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] distance must be greater than 0

Case with float value

>>> try:
...     bg.integer_validator("distance", 4.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] distance must be an integer

Case with calling area function

>>> bg.integer_validator("my_int", 12)
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

Case with None as value

>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: age must be an integer

Case without any arguments

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Case without value

>>> bg.integer_validator("year")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

Case with an array as value

>>> bg.integer_validator("day", [7, 3, 5])
Traceback (most recent call last):
TypeError: day must be an integer

Case with a tuple

>>> bg.integer_validator("day", (7, 3, 5))
Traceback (most recent call last):
TypeError: day must be an integer

Case with a dictionary

>>> bg.integer_validator("month", {"Jan", "Feb", "Mar"})
Traceback (most recent call last):
TypeError: month must be an integer========================================
  Documentation of 7-base_geometry.py
========================================

Contains a `BaseGeometry` class with the following methods

`def area(self):`

which calculates the area of the `BaseGeometry`

`def integer_validator(self, name, value):`

validates the `value` based

Test cases
==========

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

Case with a positive value

>>> bg.integer_validator("my_int", 12)
>>>

Case with a negative value

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

Case with a float

>>> bg.integer_validator("year", 8.5)
Traceback (most recent call last):
TypeError: year must be an integer

Case with zero

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

Case with a non integer

>>> bg.integer_validator("name", "A!ex")
Traceback (most recent call last):
TypeError: name must be an integer

Case with value as boolean

>>> bg.integer_validator("width", True)
Traceback (most recent call last):
TypeError: width must be an integer

Case catched output with string value

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer

Case catched output with 0 as value

>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0

Case with negative value

>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] distance must be greater than 0

Case with float value

>>> try:
...     bg.integer_validator("distance", 4.5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] distance must be an integer

Case with calling area function

>>> bg.integer_validator("my_int", 12)
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

Case with None as value

>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: age must be an integer

Case without any arguments

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Case without value

>>> bg.integer_validator("year")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

Case with an array as value

>>> bg.integer_validator("day", [7, 3, 5])
Traceback (most recent call last):
TypeError: day must be an integer

Case with a tuple

>>> bg.integer_validator("day", (7, 3, 5))
Traceback (most recent call last):
TypeError: day must be an integer

Case with a dictionary

>>> bg.integer_validator("month", {"Jan", "Feb", "Mar"})
Traceback (most recent call last):
TypeError: month must be an integer
=======
Importing the function from the module:
        >>> BG = __import__("7-base_geometry").BaseGeometry

Checking for module docstring:
         >>> m = __import__("7-base_geometry").__doc__
         >>> len(m) > 1
         True

Checking for class docstring:
         >>> c = __import__("7-base_geometry").BaseGeometry.__doc__
         >>> len(c) > 1
         True

Checking for method docstring:
	  >>> mod1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
	  >>> len(mod1) > 1
	  True
	  >>> mod2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
          >>> len(mod2) > 1
          True

Checking for area failure:
	  >>> b = BG()
	  >>> b.area()
	  Traceback (most recent call last):
	  ...
	  Exception: area() is not implemented

Checking too many arguments for area:
	  >>> b.area(1)
	  Traceback (most recent call last):
          ...
	  TypeError: area() takes 1 positional argument but 2 were given

Checking integer validator for passing integer:
	  >>> b.integer_validator("integer", 1)

Checking for integer == 0:
	  >>> b.integer_validator("integer", 0)
	  Traceback (most recent call last):
          ...
          ValueError: integer must be greater than 0

Checking for integer < 0;
	  >>> b.integer_validator("integer", -5)
	  Traceback (most recent call last):
          ...
          ValueError: integer must be greater than 0

Checking for non-integer types:
	  >>> b.integer_validator("bool", True)
	  Traceback (most recent call last):
          ...
          TypeError: bool must be an integer
	  >>> b.integer_validator("float", 1.5)
          Traceback (most recent call last):
          ...
          TypeError: float must be an integer
	  >>> b.integer_validator("complex", complex(1, 1))
          Traceback (most recent call last):
          ...
          TypeError: complex must be an integer
	  >>> b.integer_validator("string", "hello")
          Traceback (most recent call last):
          ...
          TypeError: string must be an integer
	  >>> b.integer_validator("tuple", (1, 2))
          Traceback (most recent call last):
          ...
          TypeError: tuple must be an integer
	  >>> b.integer_validator("list", [1, 2, 3])
	  Traceback (most recent call last):
          ...
          TypeError: list must be an integer
	  >>> b.integer_validator("dict", {"key": "value"})
          Traceback (most recent call last):
          ...
          TypeError: dict must be an integer
	  >>> b.integer_validator("set", {"hello", "world"})
          Traceback (most recent call last):
          ...
          TypeError: set must be an integer
	  >>> b.integer_validator("frozenset", frozenset(["hello", "world"]))
          Traceback (most recent call last):
          ...
          TypeError: frozenset must be an integer
	  >>> b.integer_validator("bytes", b"bytes")
          Traceback (most recent call last):
          ...
          TypeError: bytes must be an integer
	  >>> b.integer_validator("bytearrays", bytearray(b"bytes"))
          Traceback (most recent call last):
          ...
          TypeError: bytearrays must be an integer

Checking for no arguments to integer_validator:
	  >>> b.integer_validator()
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for only 1 argument to integer_validator:
	  >>> b.integer_validator("integer")
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking for too many arguments:
	  >>> b.integer_validator("integer", 1, 2)
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() takes 3 positional arguments but 4 were given
>>>>>>> 58f9a67cb1a269562fdc796162ac1a88f914f3e5
